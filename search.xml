<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTML5&amp;CSS3</title>
      <link href="/2023/06/06/HTML5&amp;CSS3/"/>
      <url>/2023/06/06/HTML5&amp;CSS3/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h1><h2 id="1、什么是HTML5"><a href="#1、什么是HTML5" class="headerlink" title="1、什么是HTML5"></a>1、什么是HTML5</h2><p>HTML5是最新的HTML标准。</p><p>HTML5 是专门为承载丰富的 web 内容而设计的，并且无需额外插件。</p><p>HTML5 拥有新的语义、图形以及多媒体元素。</p><p>HTML5 提供的新元素和新的 API 简化了 web 应用程序的搭建。</p><p>HTML5 是跨平台的，被设计为在不同类型的硬件（PC、平板、手机、电视机等等）之上运行。</p><p><strong>注释：</strong>在下面的章节中，您将学到如何“帮助”老版本的浏览器处理 HTML5。</p><h2 id="2、HTML5-中的新内容？"><a href="#2、HTML5-中的新内容？" class="headerlink" title="2、HTML5 中的新内容？"></a>2、HTML5 中的新内容？</h2><p>HTML5 的新的文档类型（DOCTYPE）声明非常简单：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">The new character encoding (charset) declaration is also very simple:</span><br><span class="line"></span><br><span class="line">&lt;meta charset="UTF-8"&gt;</span><br></pre></td></tr></tbody></table></figure><p>HTML5 实例：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset="UTF-8"&gt;</span><br><span class="line">&lt;title&gt;Title of the document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">Content of the document......</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p><strong>注释：</strong>HTML5 中默认的字符编码是 UTF-8。</p><h2 id="3、HTML5-新的属性语法"><a href="#3、HTML5-新的属性语法" class="headerlink" title="3、HTML5 - 新的属性语法"></a>3、HTML5 - 新的属性语法</h2><p>HTML5 标准允许 4 中不同的属性语法。</p><p>本例演示在 <input> 标签中使用的不同语法：</p><table><thead><tr><th align="left">类型</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">Empty</td><td align="left"><input type="text" value="John Doe" disabled=""></td></tr><tr><td align="left">Unquoted</td><td align="left"><input type="text" value="John" doe=""></td></tr><tr><td align="left">Double-quoted</td><td align="left"><input type="text" value="John Doe"></td></tr><tr><td align="left">Single-quoted</td><td align="left"><input type="text" value="John Doe"></td></tr></tbody></table><p>在 HTML5 标准中，根据对属性的需求，可能会用到所有 4 种语法。</p><h2 id="4、HTML5-新特性"><a href="#4、HTML5-新特性" class="headerlink" title="4、HTML5 - 新特性"></a>4、HTML5 - 新特性</h2><p>HTML5 的一些最有趣的新特性：</p><ul><li>新的语义元素，比如 <header>, <footer>, <article>, and <section>。</section></article></footer></header></li><li>新的表单控件，比如数字、日期、时间、日历和滑块。</li><li>强大的图像支持（借由 <canvas> 和 <svg>）</svg></canvas></li><li>强大的多媒体支持（借由 <video> 和 <audio>）</audio></video></li><li>强大的新 API，比如用本地存储取代 cookie。</li></ul><h2 id="5、新的语义-x2F-结构元素"><a href="#5、新的语义-x2F-结构元素" class="headerlink" title="5、新的语义/结构元素"></a>5、新的语义/结构元素</h2><p>HTML5 提供的新元素可以构建更好的文档结构：</p><table><thead><tr><th align="left">标签</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><article></article></td><td align="left">定义文档内的文章。</td></tr><tr><td align="left"><aside></aside></td><td align="left">定义页面内容之外的内容。</td></tr><tr><td align="left"><bdi></bdi></td><td align="left">定义与其他文本不同的文本方向。</td></tr><tr><td align="left"><details></details></td><td align="left">定义用户可查看或隐藏的额外细节。</td></tr><tr><td align="left"><dialog></dialog></td><td align="left">定义对话框或窗口。</td></tr><tr><td align="left"><figcaption></figcaption></td><td align="left">定义 <figure> 元素的标题。</figure></td></tr><tr><td align="left"><figure></figure></td><td align="left">定义自包含内容，比如图示、图表、照片、代码清单等等。</td></tr><tr><td align="left"><footer></footer></td><td align="left">定义文档或节的页脚。</td></tr><tr><td align="left"><header></header></td><td align="left">定义文档或节的页眉。</td></tr><tr><td align="left"><main></main></td><td align="left">定义文档的主内容。</td></tr><tr><td align="left"><mark></mark></td><td align="left">定义重要或强调的内容。</td></tr><tr><td align="left"><menuitem></menuitem></td><td align="left">定义用户能够从弹出菜单调用的命令/菜单项目。</td></tr><tr><td align="left"><meter></meter></td><td align="left">定义已知范围（尺度）内的标量测量。</td></tr><tr><td align="left"><nav></nav></td><td align="left">定义文档内的导航链接。</td></tr><tr><td align="left"><progress></progress></td><td align="left">定义任务进度。</td></tr><tr><td align="left"><rp></rp></td><td align="left">定义在不支持 ruby 注释的浏览器中显示什么。</td></tr><tr><td align="left"><rt></rt></td><td align="left">定义关于字符的解释/发音（用于东亚字体）。</td></tr><tr><td align="left"><ruby></ruby></td><td align="left">定义 ruby 注释（用于东亚字体）。</td></tr><tr><td align="left"><section></section></td><td align="left">定义文档中的节。</td></tr><tr><td align="left"><summary></summary></td><td align="left">定义 <details> 元素的可见标题。</details></td></tr><tr><td align="left"><time></time></td><td align="left">定义日期/时间。</td></tr><tr><td align="left"><wbr></td><td align="left">定义可能的折行（line-break）。</td></tr></tbody></table><h2 id="6、新的表单元素"><a href="#6、新的表单元素" class="headerlink" title="6、新的表单元素"></a>6、新的表单元素</h2><table><thead><tr><th align="left">标签</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><datalist></datalist></td><td align="left">定义输入控件的预定义选项。</td></tr><tr><td align="left"><keygen></td><td align="left">定义键对生成器字段（用于表单）。</td></tr><tr><td align="left"><output></output></td><td align="left">定义计算结果。</td></tr></tbody></table><h2 id="7、canvas"><a href="#7、canvas" class="headerlink" title="7、canvas"></a>7、canvas</h2><p>HTML5 的 canvas 元素使用 JavaScript 在网页上绘制图像。</p><p>画布是一个矩形区域，您可以控制其每一像素。</p><p>canvas 拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id="myCanvas" width="200" height="100" style="border:1px solid #c3c3c3;"&gt;&lt;/canvas&gt;</span><br><span class="line">   &lt;canvas id="myCanvas1" width="200" height="100" style="border:1px solid #c3c3c3;"&gt;&lt;/canvas&gt;</span><br><span class="line">   &lt;canvas id="myCanvas2" width="200" height="100" style="border:1px solid #c3c3c3;"&gt;&lt;/canvas&gt;</span><br><span class="line">   &lt;canvas id="myCanvas3" width="200" height="100" style="border:1px solid #c3c3c3;"&gt;&lt;/canvas&gt;</span><br><span class="line">   &lt;canvas id="myCanvas4" width="200" height="100" style="border:1px solid #c3c3c3;"&gt;&lt;/canvas&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       // JavaScript 使用 id 来寻找 canvas 元素</span><br><span class="line">       var c = document.getElementById('myCanvas');</span><br><span class="line">       // 创建 context 对象</span><br><span class="line">       var cxt = c.getContext('2d');</span><br><span class="line">       // 绘制一个红色的矩形</span><br><span class="line">       cxt.fillStyle = "#FF0000"</span><br><span class="line">       // 在画布上绘制 150x75 的矩形，从左上角开始 (0,0)。</span><br><span class="line">       cxt.fillRect(0, 0, 150, 75)</span><br><span class="line"></span><br><span class="line">       // 绘制线条</span><br><span class="line">       var c1 = document.getElementById('myCanvas1')</span><br><span class="line">       var cxt1 = c1.getContext('2d')</span><br><span class="line">       cxt1.moveTo(10, 10)</span><br><span class="line">       cxt1.lineTo(150, 50)</span><br><span class="line">       cxt1.lineTo(10, 50)</span><br><span class="line">       cxt1.stroke();</span><br><span class="line"></span><br><span class="line">       // 绘制圆点</span><br><span class="line">       var c2 = document.getElementById('myCanvas2')</span><br><span class="line">       var cxt2 = c2.getContext('2d')</span><br><span class="line">       cxt2.fillStyle = '#FF0000'</span><br><span class="line">       cxt2.beginPath();</span><br><span class="line">       cxt2.arc(70, 18, 15, 0, Math.PI * 2, true);</span><br><span class="line">       cxt2.closePath();</span><br><span class="line">       cxt2.fill();</span><br><span class="line"></span><br><span class="line">       // 绘制渐变颜色</span><br><span class="line">       var c3=document.getElementById('myCanvas3')</span><br><span class="line">       var cxt3=c3.getContext('2d')</span><br><span class="line">       var grd=cxt3.createLinearGradient(0,0,175,50)</span><br><span class="line">       grd.addColorStop(0,'#FF0000');</span><br><span class="line">       grd.addColorStop(1,'#00FF00');</span><br><span class="line">       cxt3.fillStyle=grd;</span><br><span class="line">       cxt3.fillRect(0,0,175,50);</span><br><span class="line"></span><br><span class="line">       // 将一副图像放置到画布上</span><br><span class="line">       window.onload=function(){</span><br><span class="line">           var canvas = document.getElementById('myCanvas')</span><br><span class="line">           var ctx3 = canvas.getContext('2d')</span><br><span class="line">           var img = document.getElementById('scream')</span><br><span class="line">           ctx3.drawImage(img,10,10)</span><br><span class="line">       }</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="8、SVG"><a href="#8、SVG" class="headerlink" title="8、SVG"></a>8、SVG</h2><p>什么是SVG</p><ul><li>SVG 指可伸缩矢量图形 (Scalable Vector Graphics)</li><li>SVG 用于定义用于网络的基于矢量的图形</li><li>SVG 使用 XML 格式定义图形</li><li>SVG 图像在放大或改变尺寸的情况下其图形质量不会有损失</li><li>SVG 是万维网联盟的标准</li></ul><p>SVG的优势</p><ul><li>SVG 图像可通过文本编辑器来创建和修改</li><li>SVG 图像可被搜索、索引、脚本化或压缩</li><li>SVG 是可伸缩的</li><li>SVG 图像可在任何的分辨率下被高质量地打印</li><li>SVG 可在图像质量不下降的情况下被放大</li></ul><h2 id="9、Canvas与SVG区别"><a href="#9、Canvas与SVG区别" class="headerlink" title="9、Canvas与SVG区别"></a>9、Canvas与SVG区别</h2><p><strong>Canvas 和 SVG 都允许您在浏览器中创建图形，但是它们在根本上是不同的。</strong></p><h4 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h4><p>SVG 是一种使用 XML 描述 2D 图形的语言。</p><p>SVG 基于 XML，这意味着 SVG DOM 中的每个元素都是可用的。您可以为某个元素附加 JavaScript 事件处理器。</p><p>在 SVG 中，每个被绘制的图形均被视为对象。如果 SVG 对象的属性发生变化，那么浏览器能够自动重现图形。</p><h4 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h4><p>Canvas 通过 JavaScript 来绘制 2D 图形。</p><p>Canvas 是逐像素进行渲染的。</p><p>在 canvas 中，一旦图形被绘制完成，它就不会继续得到浏览器的关注。如果其位置发生变化，那么整个场景也需要重新绘制，包括任何或许已被图形覆盖的对象。</p><h3 id="Canvas-与-SVG-的比较"><a href="#Canvas-与-SVG-的比较" class="headerlink" title="Canvas 与 SVG 的比较"></a>Canvas 与 SVG 的比较</h3><p>下表列出了 canvas 与 SVG 之间的一些不同之处。</p><h4 id="Canvas-1"><a href="#Canvas-1" class="headerlink" title="Canvas"></a>Canvas</h4><ul><li>依赖分辨率</li><li>不支持事件处理器</li><li>弱的文本渲染能力</li><li>能够以 .png 或 .jpg 格式保存结果图像</li><li>最适合图像密集型的游戏，其中的许多对象会被频繁重绘</li></ul><h4 id="SVG-1"><a href="#SVG-1" class="headerlink" title="SVG"></a>SVG</h4><ul><li>不依赖分辨率</li><li>支持事件处理器</li><li>最适合带有大型渲染区域的应用程序（比如谷歌地图）</li><li>复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）</li><li>不适合游戏应用</li></ul><h1 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h1><p>1、边框</p><p>border-radius 创建圆角</p><p>box-shadow 添加阴影</p><p>border-image 使用图像创建一个边框</p><p>2、背景</p><p>background-image</p><p>background-size</p><p>background-origin</p><p>background-clip</p><p>3、文字效果</p><p>text-shadow</p><p>box-shadow</p><p>text-overflow</p><p>word-wrap</p><p>word-break</p><p>4、2D转换</p><p>translate()</p><p>rotate()</p><p>scale()</p><p>skow()</p><p>matrix()</p><p>5、3D转换</p><p>rotateX()</p><p>rotateY()</p><p>6、动画</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">div{</span><br><span class="line"></span><br><span class="line">  animation:mydiv 6s;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">@keyframs mydiv{</span><br><span class="line"></span><br><span class="line">from{</span><br><span class="line"></span><br><span class="line">background-color:red;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">to{</span><br><span class="line"></span><br><span class="line">background-color:green;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>7、多列布局</p><ul><li><code>column-count</code></li><li><code>column-gap</code></li><li><code>column-rule-style</code></li><li><code>column-rule-width</code></li><li><code>column-rule-color</code></li><li><code>column-rule</code></li><li><code>column-span</code></li><li><code>column-width</code></li></ul><p>8、CSS3用户界面</p><ul><li>resize</li><li>box-sizing</li><li>outline-offset</li></ul><p>9、CSS3图片</p><p>border-radius</p><p>10、弹性盒子</p><p>11、多媒体查询</p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>问题合集</title>
      <link href="/2023/06/06/%E9%97%AE%E9%A2%98%E5%90%88%E9%9B%86/"/>
      <url>/2023/06/06/%E9%97%AE%E9%A2%98%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="问题合集"><a href="#问题合集" class="headerlink" title="问题合集"></a>问题合集</h1><h2 id="node"><a href="#node" class="headerlink" title="node"></a>node</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm : 无法将“npm”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查</span><br></pre></td></tr></tbody></table></figure><p>解决方法：</p><p>方法一：以管理员身份运行<br>右击vscode，选择一管理员身份运行，即可解决问题。</p><p>方法二：查看npm环境变量配置<br>cmd运行node -v,npm -v检查是否安装</p><p>  如果此时cmd窗口提示node不是内部或外部命令，也不是可运行的程序，依旧是环境变量的问题</p><p><img src="E:\HTML5\img\node-环境1.png"></p><p>配置node环境变量：<br>控制面板–&gt;系统和安全–&gt;系统–&gt;高级系统设置–&gt;环境变量 / win+环境变量</p><p>用户变量下，新建用户变量。（变量名自己写即可）。变量值写node.js的安装路径即可</p><p><img src="E:\HTML5\img\新增环境变量.png"></p><p>npm的全局模块的存放路径以及cache的路径及增加环境变量:<br>  1） 在node.js下建立node_global和node_cahce文件夹<br>cmd窗口输入npm config set prefix“您想创建文件的地址”<br>npm config set cache“您想创建文件的地址”。一个设置了全局变量，一个设置了缓存。<br>  2）新增系统变量</p><p><img src="E:\HTML5\img\新增系统变量.png"></p><h2 id="after与-before的用法"><a href="#after与-before的用法" class="headerlink" title="::after与::before的用法"></a>::after与::before的用法</h2><p>作用一：::before和::after的主要作用是在元素内容前后加上指定内容，示例：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p&gt;你好&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"> &lt;style&gt;</span><br><span class="line">        p::after{</span><br><span class="line">            content: 'hello';</span><br><span class="line">            color: red;</span><br><span class="line">        }</span><br><span class="line">        p::before{</span><br><span class="line">            content: 'Tom';</span><br><span class="line">            color: red;</span><br><span class="line">        }</span><br><span class="line">  &lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><p>作用二、清除浮动</p><p>元素设置浮动以后，其父元素以及父元素的兄弟元素的布局都会受到影响，如父元素的背景边框不能正常显示，父元素的兄弟元素位置布局错误，所以需要清除浮动。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ul::after{</span><br><span class="line">content:'';</span><br><span class="line">display:block;</span><br><span class="line">width:0;</span><br><span class="line">height:0;</span><br><span class="line">clear:both;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>作用三：用来写小三角形</p><p>在日常的工作中会经常遇到小三角形这样的小图标，可以用添加图片的方式实现，但是更方便的是用::after,::before伪类来实现。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">div::after{</span><br><span class="line">            content: '';</span><br><span class="line">            display: inline-block;</span><br><span class="line">            width: 0;</span><br><span class="line">            height: 0;</span><br><span class="line">            border:8px solid transparent;</span><br><span class="line">            border-left: 8px solid #AFABAB;</span><br><span class="line">            position: relative;</span><br><span class="line">            top: 2px;</span><br><span class="line">            left: 10px;</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><h2 id="输入框未填写完整不可点击（vue-elementUI）"><a href="#输入框未填写完整不可点击（vue-elementUI）" class="headerlink" title="输入框未填写完整不可点击（vue+elementUI）"></a>输入框未填写完整不可点击（vue+elementUI）</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button</span><br><span class="line">:disabled="isDisabled(formCard  ['verityCodeId','verityCode','verityTel','patientId','patientTel'])" type="primary" @click="getTicket('formCard')"</span><br><span class="line">               &gt;确 定&lt;/el-button</span><br><span class="line">             &gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">data(){</span><br><span class="line">return{</span><br><span class="line">formCard: {</span><br><span class="line">        card: "",</span><br><span class="line">        code: "",//验证码验证</span><br><span class="line">        verityCodeId: "", //验证码Id</span><br><span class="line">        verityCode: "", //验证码</span><br><span class="line">        verityTel: "", //医生电话号</span><br><span class="line">        patientId: "", //病人id</span><br><span class="line">        patientTel: "", //病人电话号码</span><br><span class="line">      },</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">methods:{</span><br><span class="line"> // 是否禁用状态</span><br><span class="line">    isDisabled(formCard,except){</span><br><span class="line">     //except传入的 remark，此字段是否填写不影响按钮是否可用</span><br><span class="line">      for(let i in formCard){</span><br><span class="line">        if(except &amp;&amp; except.indexOf(i) !== -1) continue</span><br><span class="line">        if(!formCard[i]) return true;</span><br><span class="line">      }</span><br><span class="line">      return false;</span><br><span class="line">    },</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h2><p>所有工具：vue2.0 + elementUI</p><p>问题描述：</p><p>​如图所示,人工处理的这个按钮的功能是鼠标放上去会有文字提示，点击跳出一个表单的弹出框，因为有两个地方需要，我把它封装成了一个组件，我用到其他地方有文字提示，但是放在表格(el-table)里面就没有文字提示</p><p>爬坑记录：</p><p>​1、首先检查该组件是否成功</p><p>​2、检查该组件其他功能是否完善</p><p>​3、前面都没有问题，那么检查样式（在控制台调试…….）</p><p>​4、纠结，挣扎，懊悔，不断的看，最后发现是</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.el-tooltip__popper{</span><br><span class="line">    display:none;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>晕倒ing</p><h2 id="对象转换为数组"><a href="#对象转换为数组" class="headerlink" title="对象转换为数组"></a>对象转换为数组</h2><p>方法一、Object.keys()</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resultObj:{"a":"123456","b":"123456","c":"123456789"}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let setArr=Object.keys(resultObj).map(key=&gt;{</span><br><span class="line">console.log(key);</span><br><span class="line">console.log(resultObj);</span><br><span class="line">return resultObj[key];</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>实例：</p><p><img src="C:\Users\idsbg-it\AppData\Roaming\Typora\typora-user-images\image-20220304171214657.png" alt="image-20220304171214657"></p><p>方法二：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let arr = [];</span><br><span class="line">for(let i in obj){</span><br><span class="line">arr.push(obj[i]);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习笔记</title>
      <link href="/2023/06/06/JavaScript%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/06/06/JavaScript%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、输出语句"><a href="#一、输出语句" class="headerlink" title="一、输出语句"></a>一、输出语句</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、document.write('helloworld')</span><br><span class="line">2、alert('hello world');</span><br><span class="line">3、console.log('hello world')</span><br></pre></td></tr></tbody></table></figure><h2 id="二、编写位置"><a href="#二、编写位置" class="headerlink" title="二、编写位置"></a>二、编写位置</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;!-- 可外部引入；一旦引入外部文件，就不能编写代码了， 如果需要，可以创建一个新的script标签编写内部代码 --&gt;</span><br><span class="line">    &lt;!-- &lt;script src=""&gt;&lt;/script&gt; --&gt;</span><br><span class="line">    &lt;!-- &lt;script&gt;</span><br><span class="line">        alert('点我一下看看')</span><br><span class="line">    &lt;/script&gt; --&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 虽然可以写在标签中，都是它们属性结构与行为耦合，不方便维护，不推荐使用 --&gt;</span><br><span class="line">    &lt;!-- 可以将JS代码编写到标签的onclick事件中 --&gt;</span><br><span class="line">    &lt;button onclick="alert('讨厌，你点我干嘛')"&gt;点我一下&lt;/button&gt;</span><br><span class="line">    &lt;!-- 可以将JS代码写在a标签的href属性中，这样点击链接也可以执行 --&gt;</span><br><span class="line">    &lt;a href="JavaScript:alert('让你也点我')"&gt;你也点我一下&lt;/a&gt;</span><br><span class="line">    &lt;a href="JavaScript:;"&gt;你也点我一下&lt;/a&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">       </span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="三、基本语法"><a href="#三、基本语法" class="headerlink" title="三、基本语法"></a>三、基本语法</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">// 多行注释</span><br><span class="line">    // JS注释</span><br><span class="line">    // 多行注释，注释中的内容不会被执行</span><br><span class="line">     /*</span><br><span class="line">        * 1、严格区分大小写</span><br><span class="line">        * 2、JS每条语句以英文分号结尾</span><br><span class="line">        * 3、JS会自动忽略空格和换行，所以我们可以利用空格和换行对代码进行格式化 </span><br><span class="line">        * </span><br><span class="line">        */   </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="四、字面量与变量"><a href="#四、字面量与变量" class="headerlink" title="四、字面量与变量"></a>四、字面量与变量</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">字面量：都是一些不可改变的值 比如：1 2 3 4 5；字面量可以直接使用，但是我们一般不会直接使用字面量</span><br><span class="line">变量：变量直接用来保存字面量，而且变量的值可以改变</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 声明变量</span><br><span class="line">        // JS中使用var声明变量</span><br><span class="line">        var a;</span><br><span class="line">        // 为变量赋值</span><br><span class="line">        a = 123;</span><br><span class="line">        a = 456;</span><br><span class="line"></span><br><span class="line">        // 声明和变量同时进行</span><br><span class="line">        var b = 789;</span><br><span class="line">        console.log(b);</span><br><span class="line">        console.log(a);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="五、标识符"><a href="#五、标识符" class="headerlink" title="五、标识符"></a>五、标识符</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">标识符 在JS中所有的可以由我们自主命名的都可以称为标识符</span><br><span class="line">      * 例如：变量名、函数名、属性名等</span><br><span class="line">      * 命名一个标识符时需要遵循规则：</span><br><span class="line">      * 1.标识符中可以有字母、数字、下划线</span><br><span class="line">      * 2.标识符不能以数字开头</span><br><span class="line">      * 3.标识符不能用ES里面的关键字和保留字</span><br></pre></td></tr></tbody></table></figure><h2 id="六、数据类型"><a href="#六、数据类型" class="headerlink" title="六、数据类型"></a>六、数据类型</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">数据类型就是字面量的类型</span><br><span class="line">      * 在JS中一共有六种数据类型</span><br><span class="line">      *  String number boolean null undefined object</span><br><span class="line">      * </span><br><span class="line">      * 其中string number boolean null undefined是基本数据类型</span><br><span class="line">      * object是引用数据类型</span><br><span class="line">用typeof判断数据类型</span><br></pre></td></tr></tbody></table></figure><p>1、string</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string 字符串</span><br><span class="line">      * 在JS中字符串需要使用引号引起来</span><br><span class="line">      * 使用双引号单引号都可以；但是不能混着用，语法上习惯双引号在外，单引号在内</span><br></pre></td></tr></tbody></table></figure><p>2、number</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">number 在JS中所有的数值都是Number类型</span><br><span class="line">      * 包括整数和浮点数</span><br><span class="line">      * MAX_VALUE和MIN_VALUE</span><br><span class="line">      * NAN 的类型也是Number</span><br><span class="line">如果JS 中进行浮点运算，可能得到一个不精确的结果</span><br><span class="line">      * 所以千万不要使用JS进行精确度要求较高的运算</span><br></pre></td></tr></tbody></table></figure><p>3、Boolean</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">* Boolean 布尔值只有两个</span><br><span class="line">      *  true </span><br><span class="line">      *     表示为真</span><br><span class="line">      * false </span><br><span class="line">      *     表示为假</span><br><span class="line">      * </span><br><span class="line"> 使用typeof 返回boolean</span><br></pre></td></tr></tbody></table></figure><p>4、null和undefined</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* null 类型的值只有一个，就是null</span><br><span class="line">* 使用typeof检查null,返回object</span><br><span class="line"></span><br><span class="line">* undefined类型的只有一个，就是undefined</span><br><span class="line">* 当声明一个变量，但是并不给它赋值时，它的值就是undefined</span><br><span class="line">* 使用typeof检查undefined，返回undefined</span><br></pre></td></tr></tbody></table></figure><h2 id="七、强制的类型转换"><a href="#七、强制的类型转换" class="headerlink" title="七、强制的类型转换"></a>七、强制的类型转换</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">强制类型转换</span><br><span class="line">        *  将一个数据类型强制转换为其他数据类型</span><br><span class="line">        *   类型转换主要指其他数据类型转换为string number Boolean</span><br></pre></td></tr></tbody></table></figure><p>1、其他数据转换为string</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">方式一：调用被转换数据类型的tostring()方法</span><br><span class="line">       * 该方法不会影响原变量，它会转换结果并返回</span><br><span class="line">       * undefined和null两个值没有toString()方法</span><br><span class="line">方式二：调用string()函数，并将被转换的数据作为参数传递给参数</span><br><span class="line">       * 对于number和boolean实际上就是调用tostring()方法</span><br><span class="line">       * 但是对于null和undefined,就不会调用tostring()方法</span><br><span class="line">       * 它会将null直接转换为"null"</span><br><span class="line">       * 将undefined直接转换为"undefined"</span><br></pre></td></tr></tbody></table></figure><p>2、其他数据转换成Number</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">转换方式一：</span><br><span class="line">       * 使用Number()函数</span><br><span class="line">       * 字符串转Number:</span><br><span class="line">       1.如果是纯数字字符串，则直接转换成数字</span><br><span class="line">       *       2.如果字符串是非数字的内容，则转换为NaN</span><br><span class="line">       *       3.如果字符串是空串或者是一个空格的字符串，则转换为0  </span><br><span class="line">       * 布尔值转Number: </span><br><span class="line">       true 转换成 1；false 转换成 0；  </span><br><span class="line">       * null转Number:0</span><br><span class="line">       * undefined转Number: NaN</span><br><span class="line">       * </span><br><span class="line">转换方式二：</span><br><span class="line">       * 这种方式专门对付字符串</span><br><span class="line">       *     parseInt() 把一个字符串转换为整数</span><br><span class="line">       *     parseFloat() 把一个字符串转换为浮点数</span><br></pre></td></tr></tbody></table></figure><p>进制数字</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">在JS 中，</span><br><span class="line">*如果需要表示16进制的数字，则需要以0x开头</span><br><span class="line">    *如果需要表示8进制的数字，则需要以0开头</span><br><span class="line">    *如果要表示2进制数字，则需要以0b开头，但是不是所有浏览器都兼容</span><br><span class="line">像"070"这样的字符串，有些浏览器会当初八进制解析，有些浏览器会当成十进制解析</span><br><span class="line"></span><br><span class="line">进制数转换：</span><br><span class="line"> a = parseInt(a,8) //第一个数字表示要解析的值，第二个数字表示进制数</span><br></pre></td></tr></tbody></table></figure><p>3、Boolean</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">将其他数据转换为Boolean</span><br><span class="line"> 转换方式一：</span><br><span class="line">        *使用Boolean()函数</span><br><span class="line">        *数字转Boolean:除了0和NaN，都是true</span><br><span class="line">        *字符串转Boolean:除了空串，都是true</span><br><span class="line">        *null和undefined都会转换为false  </span><br><span class="line">        *对象也会转换成true</span><br></pre></td></tr></tbody></table></figure><h2 id="八、运算符"><a href="#八、运算符" class="headerlink" title="八、运算符"></a>八、运算符</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">运算符也叫操作符</span><br><span class="line">        * 通过运算符可以对一个或者多个值进行运算，并获取运算结果</span><br><span class="line">        * 比如说 typeof就是运算符，可以来获得一个值的类型,它会将该值的类型以字符串的形式返回</span><br></pre></td></tr></tbody></table></figure><p>1、算法运算符</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">当对非Number类型的值进行运算时，会将这些值转换为Number然后再运算</span><br><span class="line">   任何值和NaN做运算，最后都返回NaN</span><br><span class="line">        *    +      对两个值进行加法运算，并返回结果</span><br><span class="line">        *           如果对两个字符串进行加法运算，会做拼串</span><br><span class="line">        *           任何的值做字符串加法运算，都会先转换成字符串，再进行拼串</span><br><span class="line">        * </span><br><span class="line">        *    -       对两个值进行减法运算，并返回结果  </span><br><span class="line">        *           </span><br><span class="line">        *    *       对两个值进行乘法运算，并返回结果    </span><br><span class="line">        * </span><br><span class="line">        *    /       对两个值进行除法运算，并返回结果 </span><br><span class="line">        * </span><br><span class="line">        *   %         取模运算  </span><br></pre></td></tr></tbody></table></figure><p>2、一元运算符</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*  一元运算符：只需要一个操作符</span><br><span class="line">        *   + 正号 正号不会对数字产生影响</span><br><span class="line">        * </span><br><span class="line">        *   - 负号 负号可以对数字进行取反</span><br><span class="line">        * </span><br><span class="line">        * 对于非Number值，转换成number，再取值</span><br><span class="line">        * 可以对一个其他的数据类型安徽hi用+，来将其转换为Number</span><br><span class="line">        * 它的原理和Number()函数一样</span><br></pre></td></tr></tbody></table></figure><p>3、自增和自减</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">*  自增 </span><br><span class="line">*       通过自增可以使变量在自身的基础上增加1</span><br><span class="line">*       对一个变量自增以后，原变量的值会立即自增1</span><br><span class="line">*       自增分为两种 后++和前++；</span><br><span class="line">*           无论是前++ 还是 后++，都会立即使原变量的值自增1</span><br><span class="line">*           不同的是a++ 和 ++a的值不同</span><br><span class="line">*           a++的值等于原变量的值，自增前的值;</span><br><span class="line">*           ++a的值等于原变量自增后的值，原变量的新值</span><br><span class="line">* </span><br><span class="line">*  自减</span><br><span class="line">*       在自身的基础上减去1</span><br><span class="line">*       自减分成两种：后-- 和 前--</span><br><span class="line">*           无论是前--还是后--，都会是原变量的值自减1</span><br><span class="line">*           不同的是a-- 和 --a的值不同</span><br><span class="line">*           a--是自减前的值</span><br><span class="line">*           --a是自减后的值</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 练习题</span><br><span class="line">       var n1 =10, n2 = 20;</span><br><span class="line">       var n=n1++;</span><br><span class="line">       console.log(n); //10</span><br><span class="line">       console.log(n1); //11</span><br><span class="line">       n = ++n1;</span><br><span class="line">       console.log(n); //12</span><br><span class="line">       console.log(n1); //12</span><br><span class="line">       n = n2--;</span><br><span class="line">       console.log(n); //20</span><br><span class="line">       console.log(n2); //19</span><br><span class="line">       n = --n2;</span><br><span class="line">       console.log(n); //18</span><br><span class="line">       console.log(n2); //18</span><br></pre></td></tr></tbody></table></figure><p>4、逻辑运算符</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">JS中为我们提供了三种逻辑运算符</span><br><span class="line">                 ！非</span><br><span class="line">                      可以用来对一个值进行非运算</span><br><span class="line">                      所谓的非运算就是值对布尔值进行取反</span><br><span class="line">                         true变false false变true</span><br><span class="line">                      如果对一个值进行两次取反，它不会变化</span><br><span class="line">                      如果对非布尔值进行运算，则会转换成布尔值，然后再取反</span><br><span class="line">                      所有可以利用该特点，将其他类型转换为布尔型</span><br><span class="line">                      任意的数据类型取两次反，将数据类型转换为Boolean类型</span><br><span class="line">       </span><br><span class="line">                  &amp;&amp;  与</span><br><span class="line">                          可以为符号两侧的值进行运算并返回结果</span><br><span class="line">                          如果两端都为true，则返回true</span><br><span class="line">                          运算规则：两个值中只要有一个值为false则返回false</span><br><span class="line">       </span><br><span class="line">                          JS中的“与”属于短路的与，如果一个值为false,则不会看第二个值</span><br><span class="line">       </span><br><span class="line">                  || 或</span><br><span class="line">                           可以为符号两侧的值进行运算并返回结果</span><br><span class="line">                           运算规则：</span><br><span class="line">                                只要有一个值是true，则返回true</span><br><span class="line">                                两个值都为false,才返回false</span><br></pre></td></tr></tbody></table></figure><p>5、非布尔值的与或运算</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp;  ||  非布尔值的情况</span><br><span class="line">         对于非布尔值进行与或运算时，会将其转换为布尔值，然后再运算</span><br><span class="line">       </span><br><span class="line">         与运算：如果两个值都为true，则返回后边的</span><br><span class="line">                如果第一个值为false,直接返回第一个值</span><br><span class="line">        </span><br><span class="line">         或运算：如果第一个值为true，则直接返回第一个值</span><br><span class="line">                如果第一个值为false,则返回第二个值</span><br></pre></td></tr></tbody></table></figure><p>6、赋值运算符</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">可以将符号右侧的值赋值给左侧的变量</span><br><span class="line">           += : a += 5 等价于 a = a + 5</span><br><span class="line">           -=:: a -= 5 等价于 a = a - 5</span><br><span class="line">           *= : a *= 5 等价于 a = a * 5; </span><br><span class="line">           /= : a /= 5 等价于 a = a / 5; </span><br></pre></td></tr></tbody></table></figure><p>7、关系运算符</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">通过关系运算符可以比较两个值之间的大小关系</span><br><span class="line">           如果关系成立，返回true；如果关系不成立，返回false</span><br><span class="line">         </span><br><span class="line">           &gt; 判断左侧的值是否大于右侧的值，成立，则返回true；反之，返回false</span><br><span class="line">         </span><br><span class="line">           &gt;= 判断左侧的值是否大于或者等于右侧的值，成立，则返回true；反之，返回false</span><br><span class="line">         </span><br><span class="line">           &lt; 判断左侧的值是否小于右侧的值，成立，则返回true；反之，返回false</span><br><span class="line">           &lt;= 判断左侧的值是否小于或等于右侧的值，成立，则返回true；反之，返回false</span><br><span class="line">            </span><br><span class="line">         </span><br><span class="line">           非数值进行比较，会将其转换为数字再进行比较</span><br><span class="line">               如果两边都是字符串，不会转换成数字比较，会比较它的字符编码</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 使用unicod编码 \u+编码</span><br><span class="line">       console.log('\u8596');</span><br></pre></td></tr></tbody></table></figure><p>8、相等运算符</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">相等</span><br><span class="line">   *  ==</span><br><span class="line">   *  比较两个值是否相等</span><br><span class="line">   *       如果相等则返回true，反之，则返回false</span><br><span class="line">   *  使用==来做相等运算</span><br><span class="line">   *       当使用==来比较两个值时，如果值的类型不同，则会自动进行类型转换，将其转换为相同的类型</span><br><span class="line">   *       然后在比较</span><br><span class="line">不相等</span><br><span class="line">   *   !=</span><br><span class="line">   *       判断两个值是否不相等， 如果不相等则返回true，反之，则返回false</span><br><span class="line">   *           </span><br><span class="line">   *       不相等也会对变量进行自动的类型转换，如果转换后相等它会返回false</span><br><span class="line">   *       </span><br><span class="line">   *   ===</span><br><span class="line">   *       全等</span><br><span class="line">   *           用来判断两个值是否全等，如果两个值的类型不同，直接返回false</span><br><span class="line">   *           </span><br><span class="line">   *   !==</span><br><span class="line">   *       不全等</span><br><span class="line">   *           用来判断两个值不全等，</span><br><span class="line">   </span><br><span class="line">   可以通过isNaN()判断一个值是否是NaN</span><br><span class="line">   NaN不和任何值相等，包括它本身</span><br></pre></td></tr></tbody></table></figure><p>9、条件运算符</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">条件运算符也叫三元运算符</span><br><span class="line">          语法：</span><br><span class="line">             条件表达式 ? 语句1 : 语句2；</span><br><span class="line">             执行的流程：</span><br><span class="line">                  条件运算符在执行时，首先对条件表达式进行求值，</span><br><span class="line">                          如果这值为true，则执行语句1，并返回执行结果</span><br><span class="line">                          如果这值为false,则执行语句2，并返回结果</span><br></pre></td></tr></tbody></table></figure><h2 id="九、代码块"><a href="#九、代码块" class="headerlink" title="九、代码块"></a>九、代码块</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">        * 我们的程序是由一条一条的语句构成的</span><br><span class="line">        *  语句是按照自上而下的顺序一条一条执行的</span><br><span class="line">        *  在JS中可以使用{}语句进行分组</span><br><span class="line">        *       同一个{}中的语句我们称为一组语句</span><br><span class="line">        *       它们要么都执行，要么都不执行</span><br><span class="line">        *       一个{}中的语句我们也称为一个代码块</span><br><span class="line">        *       在代码块的后边就不用再编写;</span><br><span class="line">        *</span><br><span class="line">        * 在JS的代码块，只具有分组的作用没有其他用途</span><br><span class="line">        *       代码块内容的内容，在外部的完全可见的</span><br><span class="line">        */</span><br><span class="line">        </span><br><span class="line">        {</span><br><span class="line">            alert(hello) ；</span><br><span class="line">            console.log('hello');</span><br><span class="line">            document.write('hello')</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><h2 id="十、流程控制语句"><a href="#十、流程控制语句" class="headerlink" title="十、流程控制语句"></a>十、流程控制语句</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">        * 流程控制语句</span><br><span class="line">        *     在JS中程序是从上向下一行一行执行的</span><br><span class="line">        *     通过流程控制语句可以控制程序执行流程</span><br><span class="line">        *         使程序可以根据一定的条件来选择执行</span><br><span class="line">        *     语句的分类：</span><br><span class="line">        *        1、条件判断语句  </span><br><span class="line">        *        2、条件分支语句</span><br><span class="line">        *        3、循环语句   </span><br><span class="line">        */</span><br></pre></td></tr></tbody></table></figure><p>1、if语句</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* 条件判断语句：</span><br><span class="line">       *   使用条件判断语句可以执行某个语句之前进行判断</span><br><span class="line">       *       如果条件成立才会执行语句，条件不成立则语句不执行</span><br><span class="line">       *   if语句</span><br><span class="line">       *   if(条件表达式)</span><br><span class="line">       *       语句</span><br><span class="line">       *   if语句在执行时，会先对条件表达式进行求职判断</span><br><span class="line">       *   如果条件表达式的值为true，则执行if的语句  </span><br><span class="line">       *   如果条件表达式的值为false,则不会执行if后的语句</span><br></pre></td></tr></tbody></table></figure><p>2、条件分支语句</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">        * 条件分支语句也叫switch语句</span><br><span class="line">        *       语法：</span><br><span class="line">        *           switch(条件表达式){</span><br><span class="line">        *               case 表达式：</span><br><span class="line">        *                       语句；</span><br><span class="line">        *                       break; </span><br><span class="line">        *               case 表达式：</span><br><span class="line">        *                       语句；</span><br><span class="line">        *                       break; </span><br><span class="line">        *               default：</span><br><span class="line">        *                       语句；</span><br><span class="line">        *                       break;   </span><br><span class="line">        *            }</span><br><span class="line">        */</span><br></pre></td></tr></tbody></table></figure><p>3、循环语句</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">       * 循环语句：向页面中输出连续的数字</span><br><span class="line">       *   </span><br><span class="line">       * </span><br><span class="line">       * do ... while</span><br><span class="line">       *   do ... while语法：</span><br><span class="line">       *       do{</span><br><span class="line">       *           语句</span><br><span class="line">       *       }while(条件表达式)</span><br><span class="line">       *   执行流程：</span><br><span class="line">       *       </span><br><span class="line">       *</span><br><span class="line">       */</span><br></pre></td></tr></tbody></table></figure><p>for循环</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">* for语句:也是一个循环语句，也称为for循环</span><br><span class="line"></span><br><span class="line">// // 打印1到100之间所有的奇数之和</span><br><span class="line">// var sum = 0;</span><br><span class="line">// for(var i=1; i&lt;=100; i++){</span><br><span class="line">//     // 判断i是否是奇数 不能被2整除就是奇数</span><br><span class="line">//     if( i%2!=0 ){</span><br><span class="line">//         console.log(i);</span><br><span class="line">//         // 得到奇数，求和</span><br><span class="line">//         sum = sum + i;</span><br><span class="line">//     }</span><br><span class="line">// }</span><br><span class="line">// console.log(sum);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// // 打印1到100之间所有7的倍数的个数及总和</span><br><span class="line">// // 打印1到100之间所有的数</span><br><span class="line">// var sum = 0;</span><br><span class="line">// var count = 0;</span><br><span class="line">// for(var i=0; i&lt;=100; i++){</span><br><span class="line">//     // console.log(i);</span><br><span class="line">//     // 打印出所有7的倍数</span><br><span class="line">//     if(i%7==0){</span><br><span class="line">//         sum = sum + i;</span><br><span class="line">//         count++;</span><br><span class="line">//     }</span><br><span class="line">// }</span><br><span class="line">// console.log(count);</span><br><span class="line">// console.log(sum);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 水仙花数是指一个3位数，它的每个位上的数字的3次幂之和等于它本身，（例如：1^3 + 5^3 + 3^3 = 153）</span><br><span class="line">// 打印出所有三位数</span><br><span class="line">for(var i=100; i&lt;=999; i++){</span><br><span class="line">    // console.log(i);</span><br><span class="line">    // 判断每个位上的数字的3次幂之和等于它背身</span><br><span class="line">    // 获取百位数上的数字</span><br><span class="line">    var a = parseInt(i/100);</span><br><span class="line">    // console.log(a);</span><br><span class="line">    var b = parseInt((i-a*100)/10);</span><br><span class="line">    // console.log(b);</span><br><span class="line">    var c = parseInt(i%10);</span><br><span class="line">    if(a*a*a + b*b*b + c*c*c == i){</span><br><span class="line">        console.log(i);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//    在页面中接收一个用户输入的数字，并判断该数是否是质数</span><br><span class="line">   //  质数是只能被1和它自身整除的数，1不是质数也不是合数，质数必须是大于1的自然数</span><br><span class="line"></span><br><span class="line">   var num = prompt('请输入一个自然数：');</span><br><span class="line">   // 判断值是否合法</span><br><span class="line">   if(num&lt;=1){</span><br><span class="line">       alert('该值不合法');</span><br><span class="line">   }else{</span><br><span class="line">       // 创建一个变量来保存当前的数的状态</span><br><span class="line">       // 默认当前怒骂是质数</span><br><span class="line">       var flag = true ;</span><br><span class="line"></span><br><span class="line">       // 判断num是否是质数</span><br><span class="line">       // 判断2到num之间的数</span><br><span class="line">       for(var i=2; i&lt;num; i++){</span><br><span class="line">           // console.log(i);</span><br><span class="line">           // 判断num是否能被i整除</span><br><span class="line">           if(num % i == 0){</span><br><span class="line">               // 如果num能被i整除，则说明num一定不是质数</span><br><span class="line">               flag = false;</span><br><span class="line">           }</span><br><span class="line">       }</span><br><span class="line">       if(flag){</span><br><span class="line">           alert(num + '是质数');</span><br><span class="line">       }else{</span><br><span class="line">           alert(num + '不是质数');</span><br><span class="line">       }</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">       *</span><br><span class="line">       * 通过程序，在页面中输出如下的图形</span><br><span class="line">       * *</span><br><span class="line">       * **</span><br><span class="line">       * ***</span><br><span class="line">       * ****</span><br><span class="line">       * *****</span><br><span class="line">       * </span><br><span class="line">       * *****</span><br><span class="line">       * *****</span><br><span class="line">       * *****</span><br><span class="line">       * *****</span><br><span class="line">       * *****</span><br><span class="line">       * </span><br><span class="line">       * */</span><br><span class="line"></span><br><span class="line">       // </span><br><span class="line">       // 在body里面输出一个星号</span><br><span class="line">       // for(var i=0; i&lt;5; i++){</span><br><span class="line">       // document.write('*****&lt;br /&gt;');</span><br><span class="line">       // }</span><br><span class="line"></span><br><span class="line">       // 内层循环可以决定图形的宽度，执行几次图形的宽度就是多少</span><br><span class="line">       // for(var i=0;i&lt;5;i++){ //列</span><br><span class="line">       //     for(var j=0;j&lt;=i;j++){ //行</span><br><span class="line">       //         document.write('*&amp;nbsp;&amp;nbsp;&amp;nbsp');</span><br><span class="line">       //     }</span><br><span class="line">       //     document.write('&lt;br /&gt;')</span><br><span class="line">       // }</span><br><span class="line"></span><br><span class="line">       // for(var i=0;i&lt;5;i++){ //列</span><br><span class="line">       //     for(var j=0;j&lt;5-i;j++){ //行</span><br><span class="line">       //         document.write('*&amp;nbsp;&amp;nbsp;&amp;nbsp');</span><br><span class="line">       //     }</span><br><span class="line">       //     document.write('&lt;br /&gt;')</span><br><span class="line">       // }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       // 九九乘法表</span><br><span class="line">       for(var i=1; i&lt;=9; i++){</span><br><span class="line">           for(var j=1; j&lt;=i; j++){</span><br><span class="line">               document.write('&lt;span&gt;'+ j +'*'+ i +'='+ i*j +'&lt;/span&gt;')</span><br><span class="line">           }</span><br><span class="line">           document.write('&lt;br /&gt;')</span><br><span class="line">       }</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 打印2到100之间所有的数</span><br><span class="line">       for (var i = 2; i &lt;= 100; i++) {</span><br><span class="line">           var flag = true;</span><br><span class="line">           for (var j = 2; j &lt; i; j++) {</span><br><span class="line">               if (i % j == 0) {</span><br><span class="line">                   // i不是质数</span><br><span class="line">                   flag = false;</span><br><span class="line">               }</span><br><span class="line">           }</span><br><span class="line">           if (flag) {</span><br><span class="line">               console.log(i + '是质数');</span><br><span class="line">           } else {</span><br><span class="line">               // console.log(i + '不是质数');</span><br><span class="line">           }</span><br><span class="line">       }</span><br></pre></td></tr></tbody></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo的个性化配置</title>
      <link href="/2023/06/03/hexo%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/06/03/hexo%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>Hexo简介<br>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p><p>教程分三个部分，</p><p>第一部分：hexo的初级搭建还有部署到github page上，以及个人域名的绑定。<br>第二部分：hexo的基本配置，更换主题，实现多终端工作，以及在coding page部署实现国内外分流<br>第三部分：hexo添加各种功能，包括搜索的SEO，阅读量统计，访问量统计和评论系统等。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2023/06/03/first/"/>
      <url>/2023/06/03/first/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">是的撒的撒大声地</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码 </tag>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/05/30/hello-world/"/>
      <url>/2023/05/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tag:blog</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
